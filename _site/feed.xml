<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KouChengjian</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 21 Apr 2017 11:23:20 +0800</pubDate>
    <lastBuildDate>Fri, 21 Apr 2017 11:23:20 +0800</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Java核心技术 卷1 第四章 对象与类</title>
        <description>主要介绍了面向对象程序设计、如何创建标准Java类库中的类对象、如何编写自己的类。</description>
        <pubDate>Fri, 21 Apr 2017 11:17:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/21/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%8D%B71-%E7%AC%AC%E5%9B%9B%E7%AB%A0/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/21/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%8D%B71-%E7%AC%AC%E5%9B%9B%E7%AB%A0/</guid>
        
        <category>Java程序设计概述</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Android开发艺术探 第十章 Android的消息机制</title>
        <description>Android的消息机制主要指Handler的运行机制，Handler的运行需要底层的MessageQueue和Looper的支撑。</description>
        <pubDate>Tue, 18 Apr 2017 11:20:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/18/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2-%E7%AC%AC%E5%8D%81%E7%AB%A0/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/18/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2-%E7%AC%AC%E5%8D%81%E7%AB%A0/</guid>
        
        <category>Android开发艺术探</category>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Android开发艺术探 第八章 理解Window和WindowManager</title>
        <description>Window是一个抽象类，它的具体实现是PhoneWindow。WindowManager是外界访问Window的入口，Window的具体实现位于WindowManagerService中，WindowManager和WindowManagerService的交互是一个IPC过程。Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，它们的视图实际上都是附加在Window上的，因此Window实际是View的直接管理者。</description>
        <pubDate>Mon, 17 Apr 2017 11:30:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/17/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2-%E7%AC%AC%E5%85%AB%E7%AB%A0/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/17/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2-%E7%AC%AC%E5%85%AB%E7%AB%A0/</guid>
        
        <category>Android开发艺术探</category>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Android开发艺术探 第七章 Android动画深入分析</title>
        <description>Android动画可以分成三种：View动画，帧动画，属性动画。帧动画也属于View动画。View动画只能改变现实效果，不能真正改变View的属性。</description>
        <pubDate>Wed, 12 Apr 2017 11:21:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/12/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2-%E7%AC%AC%E4%B8%83%E7%AB%A0/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/12/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2-%E7%AC%AC%E4%B8%83%E7%AB%A0/</guid>
        
        <category>Android开发艺术探</category>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Android开发艺术探 第四章 View工作原理</title>
        <description>ViewRoot对应于ViewRootImpl类，它是连接WindowManager和DecorView的纽带，View的三大流程均是通过ViewRoot来完成的。</description>
        <pubDate>Mon, 10 Apr 2017 11:45:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/10/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2-%E7%AC%AC%E5%9B%9B%E7%AB%A0/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/10/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2-%E7%AC%AC%E5%9B%9B%E7%AB%A0/</guid>
        
        <category>Android开发艺术探</category>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Android开发艺术探 第三章 View的事件体系</title>
        <description>View是Android中所有控件的基类，View是一种界面层的控件的一种抽象，它代表了一个控件，在Android设计中，ViewGroup也继承了View，这就意味着View本身就可以是单个控件也可以是多个控件组成的一组控件，通过这种关系就形成了View树的结构。</description>
        <pubDate>Sun, 09 Apr 2017 19:30:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/09/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2-%E7%AC%AC%E4%B8%89%E7%AB%A0/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/09/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2-%E7%AC%AC%E4%B8%89%E7%AB%A0/</guid>
        
        <category>Android开发艺术探</category>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Android开发艺术探 第二章 IPC机制</title>
        <description>Inter-Process Communication的缩写。含义为进程间通信或跨进程通信，是指两个进程之间进行数据交换的过程。</description>
        <pubDate>Sat, 08 Apr 2017 14:53:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/08/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2-%E7%AC%AC%E4%BA%8C%E7%AB%A0/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/08/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2-%E7%AC%AC%E4%BA%8C%E7%AB%A0/</guid>
        
        <category>Android开发艺术探</category>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Android开发艺术探 第一章 Android生命周期和启动模式</title>
        <description>
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#Android的生命周期和启动模式&quot;&gt;Android的生命周期和启动模式&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#正常情况生命周期分析&quot;&gt;正常情况生命周期分析&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#异常情况生命周期分析&quot;&gt;异常情况生命周期分析&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Activity的启动模式&quot;&gt;Activity的启动模式&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#Activity的LaunchMode&quot;&gt;Activity的LaunchMode&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#Activity的Flags&quot;&gt;Activity的Flags&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#IntentFilter的匹配规则&quot;&gt;IntentFilter的匹配 规则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 07 Apr 2017 19:45:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/07/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2-%E7%AC%AC%E4%B8%80%E7%AB%A0/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/07/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2-%E7%AC%AC%E4%B8%80%E7%AB%A0/</guid>
        
        <category>Android开发艺术探</category>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>ADB常用命令</title>
        <description>
ADB，即 Android Debug Bridge，它是 Android 开发/测试人员不可替代的强大工具，也是 Android 设备玩家的好玩具。

</description>
        <pubDate>Wed, 05 Apr 2017 14:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/05/ADB%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/05/ADB%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</guid>
        
        <category>ADB</category>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Android 我见知（一） - 性能优化</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#布局优化&quot; id=&quot;markdown-toc-布局优化&quot;&gt;布局优化&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#android-ui渲染机制&quot; id=&quot;markdown-toc-android-ui渲染机制&quot;&gt;Android UI渲染机制&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;布局优化&quot;&gt;布局优化&lt;/h2&gt;
&lt;h3 id=&quot;android-ui渲染机制&quot;&gt;Android UI渲染机制&lt;/h3&gt;
要保持画面的流畅，需要保证画面的帧率达到40fps每秒到60fps每秒。系统通过VSYNC信号触发对UI的渲染，重绘，期间隔时间为16ms，如果系统每次渲染的间隔都保持在16ms，那么我们所看到的界面基本流畅。如果不能保证在16ms之内渲染完成，那么就会照常丢帧现象。

</description>
        <pubDate>Tue, 21 Feb 2017 13:47:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/21/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/21/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
        
        <category>Android我见知</category>
        
        
        <category>Android</category>
        
      </item>
    
  </channel>
</rss>
